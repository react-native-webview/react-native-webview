///
/// HybridNitroBridgeWebviewSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroBridgeWebviewSpec.hpp"

// Forward declaration of `HybridNitroBridgeWebviewSpec_cxx` to properly resolve imports.
namespace NitroBridgeWebview { class HybridNitroBridgeWebviewSpec_cxx; }



#include <string>

#include "NitroBridgeWebview-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bridgewebview {

  /**
   * The C++ part of HybridNitroBridgeWebviewSpec_cxx.swift.
   *
   * HybridNitroBridgeWebviewSpecSwift (C++) accesses HybridNitroBridgeWebviewSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroBridgeWebviewSpec_cxx can directly inherit from the C++ class HybridNitroBridgeWebviewSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroBridgeWebviewSpecSwift: public virtual HybridNitroBridgeWebviewSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroBridgeWebviewSpecSwift(const NitroBridgeWebview::HybridNitroBridgeWebviewSpec_cxx& swiftPart):
      HybridObject(HybridNitroBridgeWebviewSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBridgeWebview::HybridNitroBridgeWebviewSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string multiply(double a, double b, const std::string& input) override {
      auto __result = _swiftPart.multiply(std::forward<decltype(a)>(a), std::forward<decltype(b)>(b), input);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroBridgeWebview::HybridNitroBridgeWebviewSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bridgewebview
